{"version":3,"file":"static/js/524.3637434f.chunk.js","mappings":"2PAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,4KAUVE,EAAcF,EAAAA,GAAAA,MAAH,+ZAoBXG,EAAYH,EAAAA,GAAAA,OAAH,4d,SCiBtB,EA5CoB,WAClB,OAAwCI,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KACMC,EAAYL,EAAaM,IAAI,SAC7BC,GAAWC,EAAAA,EAAAA,MAYjB,OAVAC,EAAAA,EAAAA,YAAU,WACRJ,IAAaK,EAAAA,EAAAA,IAAaL,EAAW,GAAGM,KAAKP,EAC9C,GAAE,CAACC,KASF,iCACE,kBAAMO,SARV,SAAsBC,GACpBA,EAAIC,iBACJ,IAAMC,EAAQF,EAAIG,cAAcC,YAAYC,MAC5CjB,EAAgB,CAAEc,MAAAA,GACnB,EAIG,WACE,SAAClB,EAAD,CAAasB,KAAK,iBAClB,SAACrB,EAAD,CAAWsB,KAAK,SAAhB,uBAEDjB,IACC,iCACE,wBACGA,EAAOkB,KAAI,SAAAC,GACV,OACE,yBACE,SAAC5B,EAAD,CACE6B,GAAE,UAAKD,EAAME,IACbC,MAAO,CAAEC,OAAO,GAAD,OAAKnB,EAASoB,UAAd,OAAyBpB,EAASmB,SAFnD,SAGGJ,EAAMM,SAJFN,EAAME,GAQlB,OAEH,SAAC,KAAD,SAKT,C,+LC9CKK,EAAK,mCAIJ,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,wFACoBC,EAAAA,EAAAA,GAAM,mBAAoB,CAAEC,OAAO,CAAEC,QAASL,EAAKE,KAAAA,KADvE,cACGI,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAMA,SAAe3B,EAAtB,iDAAO,OAAP,oBAAO,WAA4BK,EAAOgB,GAAnC,wFACoBC,EAAAA,EAAAA,GAAM,gBAAiB,CAAEC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,EAAMhB,MAAAA,KAD3E,cACGoB,EADH,yBAEIA,EAASC,KAAKC,SAFlB,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bd,GAA/B,wFACoBQ,EAAAA,EAAAA,GAAM,UAAD,OAAWR,GAAM,CAAES,OAAQ,CAAEC,QAASL,KAD/D,cACGM,EADH,yBAEIA,EAASC,MAFb,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8Bf,GAA9B,wFACoBQ,EAAAA,EAAAA,GAAM,UAAD,OAAWR,EAAX,YAAyB,CAAES,OAAQ,CAAEC,QAASL,KADvE,cACGM,EADH,yBAGIA,EAASC,KAAKI,MAHlB,kEAQA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA8BjB,EAAIO,GAAlC,wFACoBC,EAAAA,EAAAA,GAAM,UAAD,OAAWR,EAAX,YAAyB,CAAES,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,KAD5E,cACGI,EADH,yBAGIA,EAASC,KAAKC,SAHlB,kEA5BPL,EAAAA,EAAAA,SAAAA,QAAyB,+B","sources":["Pages/SearchPages/SearchPages.Styled.js","Pages/SearchPages/SearchPages.jsx","services/MoviesApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const LinkStyled = styled(Link)`\n  font-weight: 500;\n  font-size: 13px;\n  line-height: 1.14;\n  color: navy;\n  display: block;\n  letter-spacing: 0.02em;\n  position: relative;\n`;\n\nexport const InputStyled = styled.input `\n    width: 200px;\n    height: 20px;\n  \n    margin-left: 20px;\n    margin-bottom: 10px;\n    margin-top: 4px;\n    border-style: solid;\n    border-width: 1px;\n    border-radius: 3px;\n   \n    border-color: rgba(70, 70, 84, 0.227);\n    &:focus{\n        box-shadow: 6px 6px 6px rgba(0.05, 0.05, 0.1, 0.05);\n        border: 1px solid #a9d1de;\n        outline: none;\n    \n  }\n    \n`\nexport const BtnStyled = styled.button `\n  font-weight: 400;\n  font-size: 13px;\n  line-height: 1.71;\n  color: #0b544a;\n  justify-content: center;\n  width: 60px;\n  height: 25px;\n  margin-left: 5px;\n  margin-top: 4px;\n  border-style: solid;\n  border-width: 1px;\n  border-radius: 4px;\n  border-color: rgba(70, 70, 84, 0.227);\n  &:hover{\n    border-color: #5e8591;\n    background-color: #a9d1de;\n    box-shadow: 6px 6px 6px rgba(0.05, 0.05, 0.1, 0.05);\n    cursor: pointer;\n  }\n`","import { useSearchParams, Outlet, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { searchMovies } from '../../services/MoviesApi';\nimport { LinkStyled, InputStyled, BtnStyled } from './SearchPages.Styled';\n\nconst SearchPages = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState();\n  const getParams = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    getParams && searchMovies(getParams, 1).then(setMovies);\n  }, [getParams]);\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const query = evt.currentTarget.searchInput.value;\n    setSearchParams({ query });\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <InputStyled name=\"searchInput\" />\n        <BtnStyled type=\"submit\">Search</BtnStyled>\n      </form>\n      {movies && (\n        <>\n          <ul>\n            {movies.map(movie => {\n              return (\n                <li key={movie.id}>\n                  <LinkStyled\n                    to={`${movie.id}`}\n                    state={{ search: `${location.pathname}${location.search}` }}>\n                    {movie.title}\n                  </LinkStyled>\n                </li>\n              );\n            })}\n          </ul>\n          <Outlet />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SearchPages;\n\nSearchPages.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    \n    })\n  ),\n};\n","import axios from \"axios\"\n\nconst KEY ='e27e533a17eaf10a649cd2113997b376' ;\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/' \n\nexport async function trendingMovies (page){\n    const response = await axios('trending/all/day', { params:{ api_key: KEY, page }})\n    return response.data.results\n\n};\n\nexport async function searchMovies(query, page) {\n    const response = await axios('/search/movie', { params: { api_key: KEY, page, query } })\n    return response.data.results\n\n};\n\nexport async function detailesMovies (id){\n    const response = await axios(`/movie/${id}`, { params: { api_key: KEY,  } })\n    return response.data\n\n};\n\nexport async function creditsMovies (id){\n    const response = await axios(`/movie/${id}/credits`, { params: { api_key: KEY,  } })\n\n    return response.data.cast\n\n};\n\n\nexport async function reviewsMovies (id, page){\n    const response = await axios(`/movie/${id}/reviews`, { params: { api_key: KEY, page } })\n\n    return response.data.results\n\n};\n"],"names":["LinkStyled","styled","Link","InputStyled","BtnStyled","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","getParams","get","location","useLocation","useEffect","searchMovies","then","onSubmit","evt","preventDefault","query","currentTarget","searchInput","value","name","type","map","movie","to","id","state","search","pathname","title","KEY","trendingMovies","page","axios","params","api_key","response","data","results","detailesMovies","creditsMovies","cast","reviewsMovies"],"sourceRoot":""}